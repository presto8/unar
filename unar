#!/usr/bin/env python

import argparse
import os
import subprocess
import sys
import time
from contextlib import contextmanager
from dataclasses import dataclass
from typing import Optional, TypeVar


class Fail(Exception):
    pass


@dataclass
class ExtractArchiveResult:
    finaldir: str
    filecount: int


@dataclass
class ParsedPath:
    user_input: str
    abspath: str
    extension: str
    basepath: str
    extract_command: str
    basedir: str
    extractedpath: Optional[str] = None
    culled_count: int = 0


@contextmanager
def cwd(path):
    oldpwd = os.getcwd()
    try:
        os.chdir(path)
        yield
    finally:
        os.chdir(oldpwd)


def scantree(path, follow_symlinks=False):
    for entry in os.scandir(path):
        if entry.is_dir(follow_symlinks=follow_symlinks):
            yield from scantree(entry.path, follow_symlinks=follow_symlinks)
        else:
            yield entry


# From: https://github.com/facebook/pyre-check/blob/master/pyre_extensions/__init__.py#L7-L8
_T = TypeVar("_T")


def none_throws(optional: Optional[_T], message: str = "Unexpected `None`") -> _T:
    """Convert an optional to its value. Raises an `AssertionError` if the
    value is `None`"""
    if optional is None:
        raise AssertionError(message)
    return optional


def parse_path(path) -> Optional[ParsedPath]:
    m = {
        ".zip": "unzip",
        ".tar": "tar xf",
        ".tar.bz2": "tar xf",
        ".tar.gz": "tar xf",
        ".rar": "unrar x",
        ".7z": "7z x",
        ".7zip": "7z x",
    }

    for ext, cmd in m.items():
        if path.endswith(ext):
            return ParsedPath(user_input=path,
                              abspath=os.path.abspath(path),
                              extension=ext,
                              extract_command=cmd,
                              basepath=os.path.basename(path).rstrip(ext),
                              basedir=os.path.dirname(os.path.abspath(path)))
    return None


def extract_to_temp(parsed: ParsedPath):
    extract_dir = os.path.join(parsed.basedir, parsed.basepath + "." + time.strftime("%Y%m%dT%H%M%S"))
    assert not os.path.exists(extract_dir)
    os.makedirs(extract_dir)
    with cwd(extract_dir):
        subprocess.check_output(parsed.extract_command.split() + [parsed.abspath])
    parsed.extractedpath = extract_dir


def outer_dir_check(parsed: ParsedPath):
    """If path contains a single directory, move all files in that directory up
    a level and then remove the single directory."""
    if parsed.extractedpath is None:
        raise
    contents = os.listdir(parsed.extractedpath)
    if len(contents) == 1:
        candidate = os.path.join(parsed.basedir, contents[0])
        if not os.path.exists(candidate):
            os.rename(os.path.join(parsed.extractedpath, contents[0]), candidate)
            os.rmdir(parsed.extractedpath)
            parsed.extractedpath = candidate


def get_file_count(path):
    return len(list(scantree(path)))


def cull(parsed: ParsedPath):
    if ARGS.cull is False:
        return
    for path in scantree(parsed.extractedpath):
        if "/__MACOSX/" in path.path:
            print(f"culled: {path.path}")
            os.remove(path)
            parsed.culled_count += 1


def extract_archive(path) -> ExtractArchiveResult:
    parsed = parse_path(path)
    if parsed is None:
        print(f"encountered an error while extracting: {path}, skipping")
        raise Exception("TODO: figure out return failure here.")

    extract_to_temp(parsed)
    outer_dir_check(parsed)
    cull(parsed)

    finaldir = os.path.basename(none_throws(parsed.extractedpath))
    filecount = get_file_count(parsed.extractedpath)
    return ExtractArchiveResult(finaldir=finaldir, filecount=filecount)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('files', nargs='+', help='archive files to extract')
    parser.add_argument('--verbose', default=False, action='store_true', help='show more detailed messages')
    parser.add_argument('--cull', default=False, action='store_true', help='cull unwanted files (__MACOSX, ...)')
    return parser.parse_args()


def main():
    for path in ARGS.files:
        result = extract_archive(path)
        print(f"{path} -> {result.finaldir} [{result.filecount} files]")


if __name__ == '__main__':
    try:
        ARGS = parse_args()
        main()
    except Fail as f:
        print(*f.args, file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        print("Ctrl+C")
